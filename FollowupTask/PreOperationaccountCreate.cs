// <copyright file="PreOperationaccountCreate.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/6/2023 11:44:45 AM</date>
// <summary>Implements the PreOperationaccountCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace _0523PP_VS_Solution_Plugins.FollowupTask
{

    /// <summary>
    /// PreOperationaccountCreate Plugin.
    /// </summary>    
    public class PreOperationaccountCreate: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationaccountCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PreOperationaccountCreate(string unsecure, string secure)
            : base(typeof(PreOperationaccountCreate))
        {
            
           // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            {
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                // TODO: Implement your custom Plug-in business logic.
                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {
                    Entity account = (Entity)context.InputParameters["Target"];

                    // Check if the target entity is of type Account
                    if (account.LogicalName.Equals("account", StringComparison.OrdinalIgnoreCase))
                    {

                        // Create a new Task entity and set its attributes
                        Entity task = new Entity("task");
                        task["subject"] = "Review Account Information";
                        task["description"] = "Review the information of the account and update if required";
                        task["scheduledend"] = DateTime.Now.AddDays(14); // Due date for the task
                        task["regardingobjectid"] = new EntityReference("account", account.Id); // Associate with the Account

                        // Save the new Task entity
                        currentUserService.Create(task);

                    }
                }
            }
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin _0523PP_VS_Solution_Plugins.FollowupTask.PreOperationaccountCreate : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin _0523PP_VS_Solution_Plugins.FollowupTask.PreOperationaccountCreate .", ex);
            }	
        }
    }
}
